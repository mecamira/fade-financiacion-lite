"""
M√≥dulo para hacer scraping de informaci√≥n de convocatorias desde la BDNS
usando Selenium para manejar contenido din√°mico de Angular
"""
import re
import time
from typing import Dict, Any, List, Optional
from datetime import datetime

try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from webdriver_manager.chrome import ChromeDriverManager
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False
    print("WARNING: Selenium no est√° instalado. El scraping de BDNS no estar√° disponible.")


class BDNSScraper:
    """Clase para extraer informaci√≥n de convocatorias desde la BDNS"""
    
    def __init__(self, headless: bool = True):
        """
        Inicializa el scraper
        
        Args:
            headless: Si True, ejecuta Chrome sin interfaz gr√°fica
        """
        if not SELENIUM_AVAILABLE:
            raise ImportError(
                "Selenium no est√° instalado. "
                "Instala con: pip install selenium webdriver-manager"
            )
        
        self.headless = headless
        self.driver = None
    
    def _init_driver(self):
        """Inicializa el driver de Chrome (local o remoto seg√∫n configuraci√≥n)"""
        if self.driver is not None:
            return
        
        import os
        from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
        
        chrome_options = Options()
        
        if self.headless:
            chrome_options.add_argument('--headless')
        
        # Opciones para mejor rendimiento
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-logging')
        chrome_options.add_argument('--log-level=3')
        
        # Verificar si hay un Selenium remoto configurado (Docker)
        selenium_url = os.environ.get('SELENIUM_REMOTE_URL')
        
        if selenium_url:
            # Modo Docker (producci√≥n) - usar Selenium Grid remoto
            print(f"Usando Selenium remoto en: {selenium_url}")
            try:
                self.driver = webdriver.Remote(
                    command_executor=selenium_url,
                    options=chrome_options
                )
                print("‚úì Conectado a Selenium Grid remoto")
            except Exception as e:
                print(f"Error al conectar con Selenium remoto: {e}")
                raise Exception(
                    f"No se pudo conectar con Selenium Grid en {selenium_url}. "
                    "Verifica que el contenedor de Selenium est√© corriendo."
                )
        else:
            # Modo local (desarrollo) - usar ChromeDriver local
            print("Usando ChromeDriver local")
            try:
                # Intentar con webdriver-manager
                service = Service(ChromeDriverManager().install())
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
                print("‚úì ChromeDriver inicializado con webdriver-manager")
            except Exception as e:
                print(f"Error con webdriver-manager: {e}")
                print("Intentando con ChromeDriver del sistema...")
                
                # Intentar sin especificar service (buscar en PATH)
                try:
                    self.driver = webdriver.Chrome(options=chrome_options)
                    print("‚úì ChromeDriver inicializado desde PATH")
                except Exception as e2:
                    print(f"Error al inicializar Chrome: {e2}")
                    raise Exception(
                        "No se pudo inicializar Chrome. Aseg√∫rate de tener Chrome instalado "
                        "o descarga ChromeDriver manualmente desde: "
                        "https://googlechromelabs.github.io/chrome-for-testing/"
                    )
        
        self.driver.set_page_load_timeout(30)
    
    def close(self):
        """Cierra el driver de Selenium"""
        if self.driver:
            self.driver.quit()
            self.driver = None
    
    def __enter__(self):
        """Context manager entry"""
        self._init_driver()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.close()
    
    @staticmethod
    def extraer_codigo_bdns(url_o_codigo: str) -> Optional[str]:
        """
        Extrae el c√≥digo BDNS de una URL o devuelve el c√≥digo si ya es num√©rico
        
        Args:
            url_o_codigo: URL completa de BDNS o c√≥digo num√©rico
            
        Returns:
            C√≥digo BDNS como string, o None si no se encuentra
            
        Examples:
            >>> BDNSScraper.extraer_codigo_bdns("https://www.infosubvenciones.es/bdnstrans/GE/es/convocatorias/860141")
            "860141"
            >>> BDNSScraper.extraer_codigo_bdns("860141")
            "860141"
        """
        # Si ya es un c√≥digo num√©rico, devolverlo
        if url_o_codigo.strip().isdigit():
            return url_o_codigo.strip()
        
        # Intentar extraer de la URL
        # Patr√≥n: /convocatorias/XXXXXX o /convocatoria/XXXXXX
        patron = r'/convocatorias?/(\d+)'
        match = re.search(patron, url_o_codigo)
        
        if match:
            return match.group(1)
        
        return None
    
    def obtener_info_convocatoria(self, codigo_bdns: str) -> Dict[str, Any]:
        """
        Obtiene informaci√≥n de una convocatoria desde la BDNS
        
        Args:
            codigo_bdns: C√≥digo BDNS de la convocatoria
            
        Returns:
            Diccionario con la informaci√≥n extra√≠da:
            {
                'success': bool,
                'codigo_bdns': str,
                'url_bases': str,
                'documentos': [
                    {
                        'titulo': str,
                        'fecha_registro': str,
                        'fecha_publicacion': str,
                        'url': str
                    },
                    ...
                ],
                'error': str (solo si success=False)
            }
        """
        try:
            self._init_driver()
            
            # Construir URL
            url = f"https://www.infosubvenciones.es/bdnstrans/GE/es/convocatorias/{codigo_bdns}"
            
            print(f"Accediendo a: {url}")
            self.driver.get(url)
            
            # Esperar a que cargue el contenido (Angular tarda en cargar)
            # Esperamos a que aparezca alg√∫n elemento caracter√≠stico
            wait = WebDriverWait(self.driver, 15)
            
            # Esperar a que desaparezca el spinner de carga (si existe)
            time.sleep(3)  # Dar tiempo inicial para que Angular arranque
            
            # Intentar esperar a que aparezca la secci√≥n de documentos
            try:
                wait.until(
                    EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Documentos') or contains(text(), 'documentos')]"))
                )
            except:
                # Si no encontramos la secci√≥n de documentos, dar m√°s tiempo
                time.sleep(5)
            
            # Extraer documentos (pasar codigo_bdns)
            documentos = self._extraer_documentos(codigo_bdns)
            
            resultado = {
                'success': True,
                'codigo_bdns': codigo_bdns,
                'url_bases': url,
                'documentos': documentos
            }
            
            return resultado
            
        except Exception as e:
            print(f"Error al obtener informaci√≥n de BDNS: {e}")
            import traceback
            traceback.print_exc()
            
            return {
                'success': False,
                'error': f"Error al acceder a la BDNS: {str(e)}",
                'codigo_bdns': codigo_bdns
            }
    
    def _extraer_documentos(self, codigo_bdns: str) -> List[Dict[str, Any]]:
        """
        Extrae la lista de documentos de la convocatoria
        
        Returns:
            Lista de documentos con su informaci√≥n
        """
        documentos = []
        
        try:
            print("\nüîç Buscando documentos en la secci√≥n 'Documentos de la convocatoria'...")
            
            # ESTRATEGIA 1: Buscar en la tabla espec√≠fica "Documentos de la convocatoria"
            try:
                # Buscar todas las tablas
                tablas = self.driver.find_elements(By.TAG_NAME, "table")
                print(f"   Tablas encontradas: {len(tablas)}")
                
                for tabla in tablas:
                    tabla_text = tabla.text
                    
                    # Verificar si es la tabla de documentos de convocatoria
                    if "Documentos de la convocatoria" in tabla_text or "Fecha de registro" in tabla_text:
                        print("   ‚úì Tabla de documentos encontrada!")
                        
                        # Buscar todas las filas de la tabla
                        filas = tabla.find_elements(By.TAG_NAME, "tr")
                        print(f"   Filas en la tabla: {len(filas)}")
                        
                        for idx, fila in enumerate(filas):
                            try:
                                # Buscar enlaces en esta fila
                                enlaces_fila = fila.find_elements(By.TAG_NAME, "a")
                                
                                # Tambi√©n buscar botones o elementos clickeables (Angular)
                                botones_fila = fila.find_elements(By.XPATH, ".//*[@role='button' or contains(@class, 'mat-') or @ng-click]")
                                
                                if enlaces_fila or botones_fila:
                                    # Obtener el texto completo de la fila para extraer fechas
                                    fila_text = fila.text
                                    print(f"\n   üìÑ Fila #{idx}: {fila_text[:80]}...")
                                    
                                    # Extraer fechas de la fila
                                    fechas = self._extraer_fechas_multiples(fila_text)
                                    
                                    # ESTRATEGIA: Hacer clic en el bot√≥n Permalink y capturar la URL del modal
                                    try:
                                        # Buscar el bot√≥n con title="Permalink"
                                        boton_permalink = fila.find_element(By.XPATH, ".//a[@title='Permalink']")
                                        
                                        if boton_permalink:
                                            print("      üîó Encontrado bot√≥n Permalink, haciendo clic...")
                                            
                                            # Hacer clic en el bot√≥n usando JavaScript
                                            self.driver.execute_script("arguments[0].click();", boton_permalink)
                                            
                                            # Esperar a que aparezca el modal/dialog
                                            time.sleep(1)
                                            
                                            # Buscar el enlace con la URL en el modal
                                            try:
                                                # El modal tiene un <a> con la URL completa
                                                url_link = self.driver.find_element(By.XPATH, "//mat-dialog-container//a[@href and contains(@href, '/document/')]")
                                                doc_url = url_link.get_attribute('href')
                                                
                                                if doc_url and '/document/' in doc_url:
                                                    print(f"      ‚úì URL capturada del modal: {doc_url}")
                                                    
                                                    # Descargar el PDF autom√°ticamente
                                                    try:
                                                        print(f"      üìÑ Descargando PDF...")
                                                        import requests
                                                        
                                                        # Descargar el documento
                                                        pdf_response = requests.get(doc_url, timeout=30)
                                                        
                                                        if pdf_response.status_code == 200:
                                                            # Guardar en temporal
                                                            import tempfile
                                                            temp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
                                                            temp_pdf.write(pdf_response.content)
                                                            temp_pdf_path = temp_pdf.name
                                                            temp_pdf.close()
                                                            
                                                            print(f"      ‚úì PDF descargado: {temp_pdf_path}")
                                                        else:
                                                            print(f"      ‚ö† Error al descargar PDF: {pdf_response.status_code}")
                                                            temp_pdf_path = None
                                                    except Exception as e:
                                                        print(f"      ‚ö† Error al descargar PDF: {e}")
                                                        temp_pdf_path = None
                                                    
                                                    # Cerrar el modal (buscar bot√≥n "Cerrar")
                                                    try:
                                                        boton_cerrar = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Cerrar') or contains(text(), 'Close')]")
                                                        boton_cerrar.click()
                                                        time.sleep(0.3)
                                                    except:
                                                        # Si no encuentra el bot√≥n, presionar ESC
                                                        from selenium.webdriver.common.keys import Keys
                                                        self.driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
                                                        time.sleep(0.3)
                                                    
                                                    # Extraer nombre del archivo
                                                    nombre_archivo = "Documento de convocatoria"
                                                    if '.pdf' in fila_text.lower():
                                                        # Extraer nombre del PDF (buscar el patr√≥n m√°s espec√≠fico)
                                                        match_pdf = re.search(r'get_app\s+([\w\s_-]+\.pdf)', fila_text, re.IGNORECASE)
                                                        if match_pdf:
                                                            nombre_archivo = match_pdf.group(1).strip()
                                                        else:
                                                            # Intento alternativo: buscar cualquier .pdf
                                                            match_pdf = re.search(r'([\w_-]+\.pdf)', fila_text, re.IGNORECASE)
                                                            if match_pdf:
                                                                nombre_archivo = match_pdf.group(1).strip()
                                                    
                                                    print(f"      ‚úì Documento procesado:")
                                                    print(f"         Nombre: {nombre_archivo}")
                                                    print(f"         URL: {doc_url}")
                                                    print(f"         Fechas: {fechas}")
                                                    
                                                    doc_info = {
                                                        'titulo': nombre_archivo,
                                                        'url': doc_url,
                                                        'fecha_registro': fechas.get('fecha_registro'),
                                                        'fecha_publicacion': fechas.get('fecha_publicacion'),
                                                        'tipo': 'convocatoria',
                                                        'pdf_path': temp_pdf_path  # Ruta del PDF descargado
                                                    }
                                                    
                                                    documentos.append(doc_info)
                                                    continue  # Siguiente fila
                                                    
                                            except Exception as e:
                                                print(f"      ‚ö† No se pudo capturar URL del modal: {e}")
                                                # Intentar cerrar cualquier modal abierto
                                                try:
                                                    from selenium.webdriver.common.keys import Keys
                                                    self.driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
                                                except:
                                                    pass
                                                
                                    except Exception as e:
                                        print(f"      ‚ö† Error al procesar bot√≥n Permalink: {e}")
                                    
                                    # Si no encontramos ID, intentar con enlaces tradicionales
                                    for enlace in enlaces_fila:
                                        href = enlace.get_attribute('href')
                                        texto = enlace.text.strip()
                                        
                                        print(f"      ‚Üí Enlace encontrado:")
                                        print(f"         Texto: {texto}")
                                        print(f"         URL: {href}")
                                        
                                        # Aceptar enlaces que contengan 'document' O que apunten a PDFs
                                        if href and ('document' in href.lower() or href.endswith('.pdf') or '/convocatoria/' in href.lower()):
                                            print(f"      ‚úì Documento aceptado!")
                                            print(f"      ‚Üí Fechas: {fechas}")
                                            
                                            doc_info = {
                                                'titulo': texto if texto else 'Documento de convocatoria',
                                                'url': href,
                                                'fecha_registro': fechas.get('fecha_registro'),
                                                'fecha_publicacion': fechas.get('fecha_publicacion'),
                                                'tipo': 'convocatoria'
                                            }
                                            
                                            documentos.append(doc_info)
                                        else:
                                            print(f"      ‚úó Enlace rechazado (href vac√≠o o no cumple criterios)")
                                            
                            except Exception as e:
                                continue
                        
                        # Si encontramos documentos en la tabla, salir
                        if documentos:
                            break
                            
            except Exception as e:
                print(f"   Error al buscar en tablas: {e}")
            
            # ESTRATEGIA 2: Si no encontramos nada en tablas, buscar enlaces gen√©ricos
            if not documentos:
                print("\n   ‚ö† No se encontraron documentos en tablas, buscando enlaces gen√©ricos...")
                
                enlaces_docs = self.driver.find_elements(By.TAG_NAME, "a")
                print(f"   Total de enlaces: {len(enlaces_docs)}")
                
                for idx, enlace in enumerate(enlaces_docs):
                    try:
                        href = enlace.get_attribute('href')
                        texto = enlace.text.strip()
                        
                        # Filtrar solo enlaces que parezcan documentos
                        if href and 'document' in href.lower():
                            print(f"\n   üìÑ Documento gen√©rico #{idx + 1}:")
                            print(f"      T√≠tulo: {texto}")
                            print(f"      URL: {href}")
                            
                            # Intentar encontrar fechas en el contexto
                            try:
                                parent = enlace.find_element(By.XPATH, "..")
                                parent_text = parent.text
                            except:
                                parent_text = ""
                            
                            fechas = self._extraer_fechas_de_texto(parent_text)
                            
                            doc_info = {
                                'titulo': texto if texto else 'Documento',
                                'url': href,
                                'fecha_registro': fechas.get('fecha_registro'),
                                'fecha_publicacion': fechas.get('fecha_publicacion'),
                                'tipo': 'generico'
                            }
                            
                            print(f"      Fechas: {fechas}")
                            documentos.append(doc_info)
                            
                    except Exception as e:
                        continue
            
            # ESTRATEGIA 3: Buscar las bases reguladoras por separado
            print("\nüîç Buscando bases reguladoras...")
            try:
                enlaces_bases = self.driver.find_elements(By.XPATH, "//a[contains(@href, 'bopa') or contains(@href, 'bases')]")
                
                for enlace in enlaces_bases:
                    try:
                        href = enlace.get_attribute('href')
                        texto = enlace.text.strip()
                        
                        if href and 'pdf' in href.lower():
                            # Buscar contexto para fechas
                            try:
                                parent = enlace.find_element(By.XPATH, "..")
                                parent_text = parent.text
                            except:
                                parent_text = ""
                            
                            fechas = self._extraer_fechas_de_texto(parent_text)
                            
                            doc_info = {
                                'titulo': 'Bases reguladoras' if not texto else texto,
                                'url': href,
                                'fecha_registro': fechas.get('fecha_registro'),
                                'fecha_publicacion': fechas.get('fecha_publicacion'),
                                'tipo': 'bases_reguladoras'
                            }
                            
                            # Solo a√±adir si no est√° ya en la lista
                            if not any(d['url'] == href for d in documentos):
                                documentos.append(doc_info)
                                print(f"   ‚Üí Bases reguladoras: {href}")
                                
                    except Exception as e:
                        continue
                        
            except Exception as e:
                print(f"   Error al buscar bases: {e}")
            
            print(f"\n‚úÖ Total documentos extra√≠dos: {len(documentos)}")
            
            # Ordenar: primero convocatorias, luego gen√©ricos, luego bases
            documentos.sort(key=lambda x: (
                0 if x.get('tipo') == 'convocatoria' else
                1 if x.get('tipo') == 'generico' else
                2
            ))
            
        except Exception as e:
            print(f"Error al extraer documentos: {e}")
            import traceback
            traceback.print_exc()
        
        return documentos
    
    def _extraer_fechas_de_texto(self, texto: str) -> Dict[str, Optional[str]]:
        """
        Extrae fechas de un texto en formato espa√±ol
        
        Args:
            texto: Texto que puede contener fechas
            
        Returns:
            Diccionario con fecha_registro y fecha_publicacion
        """
        resultado = {
            'fecha_registro': None,
            'fecha_publicacion': None
        }
        
        # Patrones de fecha: dd/mm/yyyy o dd-mm-yyyy
        patron_fecha = r'\b(\d{1,2})[/-](\d{1,2})[/-](\d{4})\b'
        
        # Buscar todas las fechas
        fechas_encontradas = re.findall(patron_fecha, texto)
        
        if fechas_encontradas:
            # Convertir primera fecha encontrada a formato YYYY-MM-DD
            dia, mes, a√±o = fechas_encontradas[0]
            try:
                fecha_obj = datetime(int(a√±o), int(mes), int(dia))
                fecha_formateada = fecha_obj.strftime('%Y-%m-%d')
                
                # Si el texto menciona "registro", es fecha de registro
                if 'registro' in texto.lower():
                    resultado['fecha_registro'] = fecha_formateada
                # Si menciona "publicaci√≥n", es fecha de publicaci√≥n
                elif 'publicaci√≥n' in texto.lower() or 'publicacion' in texto.lower():
                    resultado['fecha_publicacion'] = fecha_formateada
                else:
                    # Por defecto, asumir que es fecha de publicaci√≥n
                    resultado['fecha_publicacion'] = fecha_formateada
                
            except ValueError:
                pass
        
        return resultado
    
    def _extraer_fechas_multiples(self, texto: str) -> Dict[str, Optional[str]]:
        """
        Extrae m√∫ltiples fechas de un texto (fecha de registro Y fecha de publicaci√≥n)
        
        Args:
            texto: Texto que puede contener m√∫ltiples fechas
            
        Returns:
            Diccionario con fecha_registro y fecha_publicacion
        """
        resultado = {
            'fecha_registro': None,
            'fecha_publicacion': None
        }
        
        # Patrones de fecha: dd/mm/yyyy o dd-mm-yyyy
        patron_fecha = r'\b(\d{1,2})[/-](\d{1,2})[/-](\d{4})\b'
        
        # Buscar todas las fechas
        fechas_encontradas = re.findall(patron_fecha, texto)
        
        if len(fechas_encontradas) >= 2:
            # Si hay 2 o m√°s fechas, asumimos que la primera es registro y la segunda publicaci√≥n
            try:
                # Primera fecha = registro
                dia, mes, a√±o = fechas_encontradas[0]
                fecha_obj = datetime(int(a√±o), int(mes), int(dia))
                resultado['fecha_registro'] = fecha_obj.strftime('%Y-%m-%d')
                
                # Segunda fecha = publicaci√≥n
                dia, mes, a√±o = fechas_encontradas[1]
                fecha_obj = datetime(int(a√±o), int(mes), int(dia))
                resultado['fecha_publicacion'] = fecha_obj.strftime('%Y-%m-%d')
                
            except (ValueError, IndexError):
                pass
                
        elif len(fechas_encontradas) == 1:
            # Si solo hay una fecha, usar el m√©todo simple
            return self._extraer_fechas_de_texto(texto)
        
        return resultado


# Funci√≥n de utilidad para usar sin context manager
def obtener_info_bdns(url_o_codigo: str, headless: bool = True) -> Dict[str, Any]:
    """
    Funci√≥n de utilidad para obtener informaci√≥n de BDNS
    
    Args:
        url_o_codigo: URL de BDNS o c√≥digo num√©rico
        headless: Si True, ejecuta sin interfaz gr√°fica
        
    Returns:
        Diccionario con la informaci√≥n de la convocatoria
    """
    # Extraer c√≥digo BDNS
    codigo = BDNSScraper.extraer_codigo_bdns(url_o_codigo)
    
    if not codigo:
        return {
            'success': False,
            'error': 'No se pudo extraer el c√≥digo BDNS de la URL proporcionada'
        }
    
    # Usar context manager para asegurar que se cierra el driver
    with BDNSScraper(headless=headless) as scraper:
        return scraper.obtener_info_convocatoria(codigo)
